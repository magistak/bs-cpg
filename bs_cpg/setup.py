"""Setup directories to store data."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_setup.ipynb.

# %% auto 0
__all__ = ['CONFIG_FILE', 'SUBDIR_NAME', 'df', 'get_base_data_path', 'read_sample_cpg']

# %% ../nbs/01_setup.ipynb 5
from pathlib import Path
import os, json
import requests
from io import BytesIO
import pandas as pd

# %% ../nbs/01_setup.ipynb 6
CONFIG_FILE = Path.home() / ".bs-cpg-config.json"
SUBDIR_NAME = ".bs-cpg"

def get_base_data_path():
    """
    Determines the base data path with a clear priority:
    1. BS_CPG_DATA environment variable.
    2. Path stored in ~/.bs-cpg-config.json.
    3. Prompts the user for the path as a last resort.
    """
    # 1. Check for an environment variable (ideal for CI/automation)
    path_str = os.getenv('BS_CPG_DATA')
    
    if path_str:
        base = Path(path_str).expanduser().resolve()
    # 2. Check for the config file (for returning users)
    elif CONFIG_FILE.exists():
        base = Path(json.loads(CONFIG_FILE.read_text())["base_path"]).expanduser().resolve()
    # 3. Prompt user only if no other configuration is found
    else:
        user_input = input("Enter a base path to store data (e.g., ~/data): ")
        base = Path(user_input).expanduser().resolve()
        # Save the configuration so we don't have to ask again
        CONFIG_FILE.write_text(json.dumps({"base_path": str(base)}))
    
    final_path = base / SUBDIR_NAME
    final_path.mkdir(parents=True, exist_ok=True)
    return final_path

# %% ../nbs/01_setup.ipynb 7
def read_sample_cpg(columns: list = None, force_download: bool = False):
    """
    Downloads and reads a sample CpG Parquet file.

    This function fetches a sample dataset from the project's GitHub repository.
    It caches the file locally to avoid re-downloading on subsequent calls.

    Args:
        columns (list, optional): A list of columns to read from the file. 
                                  Defaults to None (all columns).
        force_download (bool, optional): If True, forces a re-download of the
                                         file even if it exists locally. 
                                         Defaults to False.

    Returns:
        pd.DataFrame: A DataFrame containing the sample CpG data.
    """
    # Use a permanent link to a specific commit for reproducibility
    sample_url = "https://github.com/magistak/bs-cpg/raw/81f806649a691b766ca658437d857591c2eb6c60/data/sample_cpg_df.parquet" # Example commit hash
    
    # Use your existing function to find the local data directory for caching
    data_dir = get_base_data_path()
    local_file_path = data_dir / "sample_cpg_df.parquet"

    if not local_file_path.exists() or force_download:
        print(f"Downloading sample data to {local_file_path}...")
        response = requests.get(sample_url)
        # Raise an exception for bad status codes (like 404 Not Found)
        response.raise_for_status() 
        local_file_path.write_bytes(response.content)

    return pd.read_parquet(local_file_path, columns=columns)
df = read_sample_cpg(["chromosome", "pos"])
df

# %% ../nbs/01_setup.ipynb 8
get_base_data_path()
