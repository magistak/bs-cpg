"""Download reference genomes, chain files."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_download_ref.ipynb.

# %% auto 0
__all__ = ['download_file', 'get_ref_genome', 'get_liftover_chain']

# %% ../nbs/02_download_ref.ipynb 5
from .setup import *
from pathlib import Path
import os, json
import requests
from tqdm.auto import tqdm
import pysam
import subprocess



# %% ../nbs/02_download_ref.ipynb 6
def download_file(url: str, filename: str, sub_dir: Path = None, verbose: bool = True):
    """
    A general utility to download a file, with optional status messages and a progress bar.

    Args:
        url (str): The URL of the file to download.
        filename (str): The name for the saved file.
        sub_dir (Path, optional): A subdirectory under the main data path. Defaults to None.
        verbose (bool, optional): If True, prints status messages and shows a progress bar. 
                                  Defaults to True.
        
    Returns:
        Path: The full path to the downloaded file, or None on error.
    """
    base_dir = get_base_data_path()
    dest_dir = base_dir / sub_dir if sub_dir else base_dir
    dest_dir.mkdir(parents=True, exist_ok=True)
    dest_path = dest_dir / filename

    if dest_path.exists():
        if verbose:
            print(f"‚úÖ File '{dest_path}' already exists. Skipping.")
        return dest_path

    if verbose:
        print(f"‚¨áÔ∏è  Downloading '{filename}' from {url}...")
        
    try:
        response = requests.get(url, stream=True, timeout=15)
        response.raise_for_status()  # Raise an exception for bad status codes

        total_size = int(response.headers.get('content-length', 0))

        # The 'disable' parameter controls the tqdm progress bar
        with open(dest_path, 'wb') as f, tqdm(
            desc=filename,
            total=total_size,
            unit='iB',
            unit_scale=True,
            unit_divisor=1024,
            disable=not verbose
        ) as bar:
            for chunk in response.iter_content(chunk_size=8192):
                size = f.write(chunk)
                bar.update(size)

        if verbose:
            print(f"‚úÖ Successfully downloaded to '{dest_path}'")
        return dest_path

    except requests.exceptions.RequestException as e:
        if verbose:
            print(f"‚ùå Error downloading file: {e}")
        if dest_path.exists():
            dest_path.unlink()  # Clean up partial file
        return None

# %% ../nbs/02_download_ref.ipynb 9
def get_ref_genome(name: str, **kwargs):
    """
    Downloads a reference genome and ensures it is properly compressed with
    bgzip for use with pysam.
    """
    verbose = kwargs.get('verbose', True)
    final_filename = f"{name}.fa.bgz"
    data_dir = get_base_data_path()
    final_path = data_dir / final_filename

    if final_path.exists():
        if verbose: print(f"‚úÖ Final file '{final_path}' already exists.")
        return str(final_path)

    gz_filename = f"{name}.fa.gz"
    gz_path = download_file(
        url=f"https://hgdownload.soe.ucsc.edu/goldenPath/{name}/bigZips/{gz_filename}",
        filename=gz_filename,
        **kwargs
    )

    if gz_path is None: return None

    if is_bgzipped(gz_path):
        if verbose: print(f"üëç Downloaded file is already bgzipped. Renaming...")
        gz_path.rename(final_path)
    else:
        if verbose: print(f"‚öôÔ∏è Converting standard gzip to bgzip format using command-line tools...")
        # ---- THIS IS THE REPLACEMENT ----
        success = convert_to_bgzip(gz_path, final_path)
        if not success:
            print(f"‚ùå Conversion failed. Please check the errors above.")
            return None
        # -------------------------------
        gz_path.unlink()

    if verbose: print(f"‚úÖ Successfully prepared '{final_path}'")
    return str(final_path)
#download_ref_genome('hg38')

# %% ../nbs/02_download_ref.ipynb 12
def get_liftover_chain(genome_from: str, genome_to: str, **kwargs):
    """
    Download liftover chain file between genome versions from UCSC goldenPath liftOver.
    To get path to downloaded file use with `verbose = False`. 

    Args:
        genome_from (str): The original reference genome name (e.g., 'hg19', 'hg38', 'mm10').
        genome_to (str): The new reference genome name (e.g., 'hg19', 'hg38', 'mm10').
        **kwargs: Additional keyword arguments to be passed to download_file()
                  (e.g., verbose=False)
                  
    Returns:
        Path: The path to the downloaded file, or None if an error occurred.
    """
    genome_to_camel=genome_to.capitalize()
    file_name = f"{genome_from}To{genome_to_camel}.over.chain.gz"
    url = f"https://hgdownload.soe.ucsc.edu/goldenPath/{genome_from}/liftOver/{file_name}"

    return download_file(url=url, filename=file_name, **kwargs)
get_liftover_chain("hg19", "hg38", verbose = False)
